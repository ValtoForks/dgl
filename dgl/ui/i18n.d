/*
Copyright (c) 2014 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dgl.ui.i18n;

import std.stdio;
import std.conv;
import std.format;
import std.array;
import std.process;
import std.path;
import std.file;
import std.string;
import std.range;

/*
 * Internationalization module.
 * Supports UTF-8, works on Windows and Posix systems.
 */

version(Windows)
{
    extern(Windows) int GetLocaleInfoW(
        in uint Locale,
        in uint LCType,
        wchar* lpLCData,
        in int cchData
    );
    
    extern(Windows) int GetLocaleInfoA(
        in uint Locale,
        in uint LCType,
        char* lpLCData,
        in int cchData
    );
    
    enum uint LOCALE_USER_DEFAULT = 0x0400;
    enum uint LOCALE_SISO639LANGNAME = 0x59;
    enum uint LOCALE_SISO3166CTRYNAME = 0x5a;
}

private string syslocale;
static this()
{
    version(Windows)
    {
        string getLanguage()
        {
            char[16] str;
            GetLocaleInfoA(LOCALE_USER_DEFAULT, LOCALE_SISO639LANGNAME, str.ptr, str.length);
            return str.ptr.to!string;
        }
        
        string getCountry()
        {
            char[16] str;
            GetLocaleInfoA(LOCALE_USER_DEFAULT, LOCALE_SISO3166CTRYNAME, str.ptr, str.length);
            return str.ptr.to!string;
        }
    
        string lang = getLanguage();
        string country = getCountry();
        syslocale = format("%s_%s", lang, country);
    }
    else version(Posix)
    {
        string lang = environment.get("LANG", "en_US.utf8");
        string locale, encoding;
        formattedRead(lang, "%s.%s", &locale, &encoding);
        syslocale = locale;
    }
    else
    {
        static assert(0, "This OS is unsupported by dgl.ui.i18n");
    }
}

string systemLocale()
{
    return syslocale;
}

class Locale
{
    static string[string] translation;
    
    static void readLang(string dir)
    {
        if (exists(dir) && isDir(dir))
        {
            string loc = buildNormalizedPath(dir, syslocale ~ ".lang");
            if (exists(loc))
                readLangFile(loc);
        }
    }

    // Search locale files in several directories
    static void readLang(string[] dirs)
    {
        foreach(dir; dirs)
            readLang(dir);
    }

    static void readLangFile(string filename)
    {
        auto data = slurp!(string, string)(filename, "\"%s\" = \"%s\"");
        foreach(pair; data)
            translation[pair[0]] = pair[1];
/*
        // For DMD < 2.065
        foreach(line; filename.readText.splitLines)
        if (line)
        {
            string key, value;
            try
                formattedRead(line, "\"%s\" = \"%s\" ", &key, &value);
            catch(Exception) {}
            finally
                translation[key] = value;
        }
*/
    }
}

/*
  Usage:
  
  system("chcp 65001");
  writeln(systemLocale);
  Locale.readLang("locale");
  writeln("Hello, world!"._);
*/
string _(string s)
{
    if (s in Locale.translation)
        return Locale.translation[s];
    else
        return s;
}

string localize(string pat, dchar formattingSymbol)
{
    string result;
    string temp;
    bool appending = true;
    foreach(c; stride(pat, 1))
    {
        if (c == formattingSymbol) 
        {
            if (appending)
            {
                appending = false;
            }
            else
            {
                appending = true;
                result ~= localize(temp._, formattingSymbol);
                temp = "";
            }
        }
        else
        {
            if (appending) result ~= c;
            else temp ~= c;
        }
    }
    return result;
}

string localize(string pat)
{
    return localize(pat, '_');
}

string localizef(A...)(string pat, A args)
{
    return localize(format(pat, args), '_');
}

