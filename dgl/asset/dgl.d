/*
Copyright (c) 2014 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dgl.asset.dgl;

import std.stdio;
import std.json;
import std.string;
import std.conv;
import std.path;

import dlib.math.vector;
import dlib.math.quaternion;
import dlib.geometry.triangle;
import dlib.image.color;
import dlib.image.image;
import dlib.image.io.png;
import dlib.core.stream;
import dlib.filesystem.filesystem;

import dgl.asset.serialization;
import dgl.graphics.material;
import dgl.graphics.texture;
import dgl.scene.mesh;
import dgl.scene.entity;
import dgl.scene.scene;
import dgl.vfs.file;

/*
 * Implements scene I/O (dgl scene format)
 * TODO: lamps, cameras
 */

//version = Debug;

enum ChunkType
{
    HEADER = 0, 
    END = 1,
    TRIMESH = 2,
    MATERIAL = 3,
    ENTITY = 4
}

struct DataChunk
{
    ushort type;
    int id;
    ushort nameSize;
    uint dataSize;
    string name;
    ubyte[] data;

    string toString()
    {
        return format(
            "type = %s\n"
            "id = %s\n"
            "nameSize = %s\n"
            "dataSize = %s\n"
            "name = %s",
            type.to!ChunkType, id,
            nameSize, dataSize, name
        );
    }
}

Vector3f vec3(JSONValue v)
{
    return Vector3f(v.toString);
}

Vector4f vec4(JSONValue v)
{
    return Vector4f(v.toString);
}

Color4f col4(JSONValue v)
{
    return Color4f(v.vec4);
}

bool boolean(JSONValue v)
{
    return cast(bool)v.integer;
}

void decodeMaterial(Scene s, Material m, InputStream istrm, ReadOnlyFileSystem rofs)
{
    JSONValue[string] props;

    auto jsonSize = read!uint(istrm);
    if (jsonSize > 0)
    {
        auto jsonBytes = new ubyte[jsonSize];
        istrm.fillArray(jsonBytes);
        string json = cast(string)jsonBytes;
        if (jsonSize > 0)
            props = parseJSON(json).object;
    }

    if ("diffuseColor" in props)
    {
        m.diffuseColor = props["diffuseColor"].col4;
        m.ambientColor = m.diffuseColor;
    }

    if ("specularColor" in props)
        m.specularColor = props["specularColor"].col4;

    if ("shadeless" in props)
        m.shadeless = props["shadeless"].boolean;

    if ("textures" in props)
    {
        foreach(texi, tex; props["textures"].array)
        {
            string filename = tex["filename"].str;
            string texImgPath;

            if (rofs.exists(filename))
                texImgPath = filename;

            if (texImgPath.length == 0)
                writefln("Warning: cannot find image file (trying to load \'%s\')", filename);
            else
            {
                // for now, only PNG textures are supported by the engine
                if (extension(texImgPath) == ".png" ||
                    extension(texImgPath) == ".PNG")
                {
                    if (!(texImgPath in s.textures))
                    {
                        auto texImg = loadPNG(rofs.openForInput(texImgPath));
                        Texture texObj = new Texture(texImg);
                        s.textures[texImgPath] = texObj;
                        m.textures[texi] = texObj;
                        s.images[texObj.tex] = texImg;
                    }
                    else
                    {
                        m.textures[texi] = s.textures[texImgPath];
                    }

                    // TODO
                    //m.texBlendMode[texi] = cast(TextureCombinerMode)tex["blendType"].integer;
                }
                else
                    writefln("Warning: unsupported file type (trying to load \'%s\')", texImgPath);
            }
        }
    }
}

void decodeEntity(Entity e, InputStream istrm)
{
    JSONValue[string] props;

    e.type = read!uint(istrm);
    e.materialId = read!int(istrm);
    e.meshId = read!int(istrm);
    e.position = read!(Vector3f, true)(istrm);
    e.rotation = read!(Quaternionf, true)(istrm);
    e.scaling = read!(Vector3f, true)(istrm);
    auto jsonSize = read!uint(istrm);
    if (jsonSize > 0)
    {
        auto jsonBytes = new ubyte[jsonSize];
        istrm.fillArray(jsonBytes);
        string json = cast(string)jsonBytes;
        if (jsonSize > 0)
            e.props = parseJSON(json).object;
    }
}

struct DGLTriangle
{
    int m;
    Vector3f[3] v;
    Vector3f[3] n;
    Vector2f[3] uv1;
    Vector2f[3] uv2;
}

void calcTriangleData(Triangle* tri, DGLTriangle dglTri)
{
    tri.v[0] = dglTri.v[0];
    tri.v[1] = dglTri.v[1];
    tri.v[2] = dglTri.v[2];

    tri.n[0] = dglTri.n[0];
    tri.n[1] = dglTri.n[1];
    tri.n[2] = dglTri.n[2];

    tri.t1[0] = dglTri.uv1[0];
    tri.t1[1] = dglTri.uv1[1];
    tri.t1[2] = dglTri.uv1[2];
                
    tri.t2[0] = dglTri.uv2[0];
    tri.t2[1] = dglTri.uv2[1];
    tri.t2[2] = dglTri.uv2[2];
                
    tri.materialIndex = dglTri.m;

    tri.normal = normal(tri.v[0], tri.v[1], tri.v[2]);
                
    tri.barycenter = (tri.v[0] + tri.v[1] + tri.v[2]) / 3;

    tri.d = (tri.v[0].x * tri.normal.x + 
             tri.v[0].y * tri.normal.y + 
             tri.v[0].z * tri.normal.z);

    tri.edges[0] = tri.v[1] - tri.v[0];
    tri.edges[1] = tri.v[2] - tri.v[1];
    tri.edges[2] = tri.v[0] - tri.v[2];
}

Scene loadScene(InputStream istrm, ReadOnlyFileSystem rofs)
{
    Scene scene = new Scene();

    DataChunk readChunk()
    {
        DataChunk chunk;
        chunk.type = read!ushort(istrm);
        chunk.id = read!int(istrm);
        chunk.nameSize = read!ushort(istrm);
        chunk.dataSize = read!uint(istrm);

        if (chunk.nameSize > 0)
        {
            auto name_bytes = new ubyte[chunk.nameSize];
            istrm.fillArray(name_bytes);
            chunk.name = cast(string)name_bytes;
        }

        if (chunk.dataSize > 0)
        {
            chunk.data = new ubyte[chunk.dataSize];
            istrm.fillArray(chunk.data);
        }

        return chunk;
    }

    DataChunk chunk;
    while (chunk.type != ChunkType.END && istrm.readable)
    {
        chunk = readChunk();
        version(Debug) writefln("----\nChunk:\n%s", chunk);

        if (chunk.type == ChunkType.ENTITY)
        {
            Entity e = new Entity();
            e.id = chunk.id;
            e.name = chunk.name;
            auto strm = new ArrayStream(chunk.data, chunk.data.length);
            decodeEntity(e, strm);
            scene.entities[e.name] = e;
            version(Debug) writefln("----\nEntity:\n%s", e);
        }
        else if (chunk.type == ChunkType.MATERIAL)
        {
            Material mat = new Material();
            mat.id = chunk.id;
            mat.name = chunk.name;
            auto strm = new ArrayStream(chunk.data, chunk.data.length);
            decodeMaterial(scene, mat, strm, rofs);
            scene.materials[mat.id] = mat;
            scene.matIdByName[mat.name] = mat.id;
            version(Debug) writefln("----\nMaterial:\n%s", mat);
        }
        else if (chunk.type == ChunkType.TRIMESH)
        {
            assert(!(chunk.data.length % DGLTriangle.sizeof));
            uint numTris = chunk.data.length / DGLTriangle.sizeof;
            Triangle[] tris = new Triangle[numTris];
            auto mtris = cast(DGLTriangle[])chunk.data;
            uint offset = 0;
            foreach(i, mtri; mtris)
            {
                Triangle* tri = &tris[offset];
                calcTriangleData(tri, mtri);
                offset++;
            }

            Mesh mesh = new Mesh(tris);
            mesh.id = chunk.id;
            mesh.name = chunk.name;

            scene.meshes[mesh.id] = mesh;
            scene.meshIdByName[mesh.name] = mesh.id;

            version(Debug) writefln("numTris: %s", numTris);
        }
    }

    istrm.close();
    
    return scene;
}

