/*
Copyright (c) 2015-2016 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dgl.graphics.pass;

import dlib.core.memory;
import dlib.container.array;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.affine;
import dlib.image.color;

import dgl.core.api;
import dgl.core.interfaces;
import dgl.core.event;
import dgl.core.application;
import dgl.graphics.entity;
import dgl.graphics.scene;
import dgl.graphics.light;
import dgl.graphics.material;
import dgl.graphics.state;

class Pass: EventListener, Drawable
{
    Matrix4x4f modelViewMatrix;
    Matrix4x4f projectionMatrix;
    Color4f clearColor;
    Scene scene;
    Material defaultMaterial;
    uint groupID = 0;
    uint viewX;
    uint viewY;
    uint viewWidth;
    uint viewHeight;
    float aspectRatio;
    bool alignToWindow = false;
    bool clear = false;
    bool overrideMaterials = false;
    bool shadeless = false;

    this(uint x, uint y, uint w, uint h, Scene s, EventManager emngr)
    {
        super(emngr);
        clearColor = Color4f(0.5f, 0.5f, 0.5f, 1.0f);
        viewX = x;
        viewY = y;
        viewWidth = w;
        viewHeight = h;
        scene = s;
        aspectRatio = cast(float)(viewWidth) / cast(float)(viewHeight);

        modelViewMatrix = Matrix4x4f.identity;
        glGetFloatv(GL_PROJECTION_MATRIX, projectionMatrix.arrayof.ptr);
    }

    override void onResize(int width, int height)
    {
        if (alignToWindow)
        {
            viewX = 0;
            viewY = 0;
            viewWidth = cast(uint)width;
            viewHeight = cast(uint)height;
            aspectRatio = cast(float)(viewWidth) / cast(float)(viewHeight);
        }
    }

    void setDefaultMaterial(Material m)
    {
        defaultMaterial = m;
    }

    void draw(double dt)
    {
        Application.passWidth = viewWidth;
        Application.passHeight = viewHeight;
        Application.passMaterialsActive = !overrideMaterials;
        
        glViewport(viewX, viewY, viewWidth, viewHeight);
        glScissor(viewX, viewY, viewWidth, viewHeight);
        PipelineState.viewportX = viewX;
        PipelineState.viewportY = viewY;
        PipelineState.viewportWidth = viewWidth;
        PipelineState.viewportHeight = viewHeight;

        if (clear)
        {
            glClearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        }

        glMatrixMode(GL_PROJECTION);
        glLoadMatrixf(projectionMatrix.arrayof.ptr);
        glMatrixMode(GL_MODELVIEW);
        glLoadMatrixf(modelViewMatrix.arrayof.ptr);

        glDisable(GL_LIGHTING);
        if (defaultMaterial)
        {
            if (overrideMaterials)
            {
                PipelineState.materialsActive = false;
                defaultMaterial.forceActive = true;
            }
        }
        
        bool useLighting;
        if (scene)
        foreach(e; scene.entities)
        {
            if (groupID == 0 || e.groupID == groupID)
            {
                useLighting = !(shadeless || scene.shadeless || e.shadeless);
                
                if (useLighting)
                    LightManager.bindLighting(e);

                if (defaultMaterial)
                    defaultMaterial.bind(dt);

                e.draw(dt);

                if (defaultMaterial)
                    defaultMaterial.unbind();
                
                if (useLighting)
                    LightManager.unbindLighting();
            }
        }

        if (defaultMaterial)
        {
            if (overrideMaterials)
            {
                PipelineState.materialsActive = true;
                defaultMaterial.forceActive = false;
            }
        }
    }
}

class Pass3D: Pass
{
    this(Scene s, EventManager emngr)
    {
        super(0, 0, emngr.windowWidth, emngr.windowHeight, s, emngr);
        projectionMatrix = perspectiveMatrix(60.0f, aspectRatio, 0.1f, 100.0f);
        alignToWindow = true;
    }

    this(uint x, uint y, uint w, uint h, Scene s, EventManager emngr)
    {
        super(x, y, w, h, s, emngr);
        projectionMatrix = perspectiveMatrix(60.0f, aspectRatio, 0.1f, 100.0f);
    }

    override void onResize(int width, int height)
    {
        super.onResize(width, height);
        if (alignToWindow)
        {
            projectionMatrix = perspectiveMatrix(60.0f, aspectRatio, 0.1f, 100.0f);
        }
    }
}

class Pass2D: Pass
{
    this(Scene s, EventManager emngr)
    {
        super(0, 0, emngr.windowWidth, emngr.windowHeight, s, emngr);
        projectionMatrix = orthoMatrix(0.0f, emngr.windowWidth, 0.0f, emngr.windowHeight, 0.0f, 1.0f);
        alignToWindow = true;
    }

    this(uint x, uint y, uint w, uint h, Scene s, EventManager emngr)
    {
        super(x, y, w, h, s, emngr);
        projectionMatrix = orthoMatrix(0.0f, w, 0.0f, h, 0.0f, 1.0f);
    }

    override void onResize(int width, int height)
    {
        super.onResize(width, height);
        if (alignToWindow)
        {
            projectionMatrix = orthoMatrix(0.0f, width, 0.0f, height, 0.0f, 1.0f);
        }
    }
}

class PassApplication: Application
{
    DynamicArray!Pass passes3d;
    DynamicArray!Pass passes2d;

    this()
    {
        super();
    }

    Pass addPass3D(Pass p)
    {
        passes3d.append(p);
        return p;
    }

    Pass addPass2D(Pass p)
    {
        passes2d.append(p);
        return p;
    }

    Pass3D addPass3D(uint x, uint y, uint w, uint h, Scene s)
    {
        Pass3D p = New!Pass3D(x, y, w, h, s, eventManager);
        passes3d.append(p);
        return p;
    }

    Pass3D addPass3D(Scene s)
    {
        Pass3D p = New!Pass3D(s, eventManager);
        passes3d.append(p);
        return p;
    }

    Pass2D addPass2D(Scene s)
    {
        Pass2D p = New!Pass2D(s, eventManager);
        passes2d.append(p);
        return p;
    }

    override void onUpdate(double dt)
    {
        foreach_reverse(p; passes3d.data)
            p.processEvents();
        foreach_reverse(p; passes2d.data)
            p.processEvents();
    }

    override void onRedraw(double dt)
    {
        foreach_reverse(p; passes3d.data)
            p.draw(dt);
        foreach_reverse(p; passes2d.data)
            p.draw(dt);
    }

    ~this()
    {
        foreach(p; passes3d)
            Delete(p);
        passes3d.free();

        foreach(p; passes2d)
            Delete(p);
        passes2d.free();
    }
}


