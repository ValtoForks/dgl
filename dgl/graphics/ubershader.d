/*
Copyright (c) 2015 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dgl.graphics.ubershader;

import dlib.core.memory;
import dgl.core.event;
import dgl.graphics.material;
import dgl.graphics.shader;
import dgl.graphics.glslshader;

private string _uberVertexShader = q{
    varying vec4 shadowCoord;
    varying vec3 position;
    varying vec3 n, t, b;
    varying vec3 E;
    uniform bool bumpEnabled;
		
    void main(void)
    {
        gl_TexCoord[0] = gl_MultiTexCoord0;
        gl_TexCoord[1] = gl_MultiTexCoord1;

        n = normalize(gl_NormalMatrix * gl_Normal);
        t = normalize(gl_NormalMatrix * gl_Color.xyz);
        b = cross(n, t);
	    position = (gl_ModelViewMatrix * gl_Vertex).xyz;
        
        E = position;
        if (bumpEnabled)
        {
            E.x = dot(position, t);
            E.y = dot(position, b);
            E.z = dot(position, n);
        }
        E = -normalize(E);
        
        shadowCoord = gl_TextureMatrix[7] * (gl_ModelViewMatrix * gl_Vertex);
        
	    gl_Position = ftransform();
    }
};

private string _uberFragmentShader = q{
    varying vec4 shadowCoord;
    varying vec3 position;
    varying vec3 n, t, b;
    varying vec3 E;
		
    uniform sampler2D dgl_Texture0;
    uniform sampler2D dgl_Texture1;
    uniform sampler2D dgl_Texture2;
    uniform sampler2D dgl_Texture7;
    
    uniform bool shadeless;
    uniform bool textureEnabled;
    uniform bool bumpEnabled;
    uniform bool parallaxEnabled;
    
    const float parallaxScale = 0.06;
    const float parallaxBias = -0.03;
    const float lightRadiusSqr = 8.5;
    const float wrapFactor = 0.5;
    const float shadowBrightness = 0.3;
    const float shininess = 32.0;
    const float edgeWidth = 0.4;
    
    float texture2DCompare(sampler2D depths, vec2 uv, float compare)
    {
        float depth = texture2D(depths, uv).z;
        return (depth < compare)? 0.0 : 1.0;
    }
    
    float texture2DShadowLerp(sampler2D depths, vec2 size, vec2 uv, float compare)
    {
        vec2 texelSize = vec2(1.0) / size;
        vec2 f = fract(uv * size + 0.5);
        vec2 centroidUV = floor(uv * size + 0.5) / size;

        float lb = texture2DCompare(depths, centroidUV + texelSize * vec2(0.0, 0.0), compare);
        float lt = texture2DCompare(depths, centroidUV + texelSize * vec2(0.0, 1.0), compare);
        float rb = texture2DCompare(depths, centroidUV + texelSize * vec2(1.0, 0.0), compare);
        float rt = texture2DCompare(depths, centroidUV + texelSize * vec2(1.0, 1.0), compare);
        float a = mix(lb, lt, f.y);
        float b = mix(rb, rt, f.y);
        float c = mix(a, b, f.x);
        return c;
    }
    
    float edgeBias(float value, float b)
    {
        return (b > 0.0)? pow(value, log2(b) / log2(0.5)) : 0.0;
    }

    void main(void) 
    {
        if (shadeless)
        {
            gl_FragColor = gl_FrontMaterial.diffuse;
            return;
        }
        
        // Fog term
        /*
        const vec4 fogColor = vec4(0.1, 0.2, 0.2, 1.0);
        float fogDistance = gl_FragCoord.w * 20.0; //1.0 - (gl_FragCoord.z / gl_FragCoord.w) / 4000.0;
        fogDistance = (fogDistance > 10.0)? fogDistance : 1.0;
        float fog = clamp(fogDistance, 0.0, 1.0);
        */
        
        // Shadow term
	    vec4 shadowCoordinateWdivide = shadowCoord / shadowCoord.w ;
 	    float shadow;
        if (shadowCoord.w > 0.0)
        {
            shadowCoordinateWdivide.z *= 1.005;
            shadow = texture2DShadowLerp(dgl_Texture7, vec2(1024.0, 1024.0), 
                shadowCoordinateWdivide.st, shadowCoordinateWdivide.z);
        }
        shadow += shadowBrightness;
        
        // Parallax mapping
        vec2 texCoords = gl_TexCoord[0].st;
        if (parallaxEnabled)
        {
            vec2 eye2 = vec2(E.x, -E.y);
            float height = texture2D(dgl_Texture1, texCoords).a; 
            height = height * parallaxScale + parallaxBias;
            texCoords = texCoords + (height * eye2);
        }
        
        // Normal mapping
        vec3 N = bumpEnabled? normalize(2.0 * texture2D(dgl_Texture1, texCoords).rgb - 1.0) : n;
	
        // Texture
        vec4 tex = textureEnabled? texture2D(dgl_Texture0, texCoords) : vec4(1.0, 1.0, 1.0, 1.0);
        
        // Emission term
        vec4 emit = (gl_FrontMaterial.emission.w > 0.0)? 
            texture2D(dgl_Texture2, texCoords) * gl_FrontMaterial.emission.w :
            vec4(0.0, 0.0, 0.0, 1.0);
	    
        vec3 directionToLight;
        float distanceToLight;
        float attenuation; 
        vec3 L;
            
        vec4 col = vec4(0.02, 0.02, 0.02, 1.0);

        float diffuse;
        float specular;
        
        vec3 H;
        float NL;
        float NH;
        
        float edgeScale;
        float rim;
        
        vec4 Cr = vec4(0.1, 0.5, 0.5, 1.0);

        for (int i = 0; i < 4; i++)
	    {
	        if (gl_LightSource[i].position.w < 2.0)
	        {
	            //vec4 Ca = gl_LightSource[i].ambient; 
                vec4 Md = gl_FrontMaterial.diffuse;
	            vec4 Cd = Md * gl_LightSource[i].diffuse; 
	            vec4 Cs = gl_FrontMaterial.specular * gl_LightSource[i].specular;  
            
	            vec3 positionToLightSource = vec3(gl_LightSource[i].position.xyz - position);
	            distanceToLight = length(positionToLightSource);
                directionToLight = normalize(positionToLightSource);
            
                attenuation = clamp(1.0 - distanceToLight/lightRadiusSqr, 0.0, 1.0) * 0.5;
                
                L = bumpEnabled? 
                    vec3(dot(directionToLight, t),
                         dot(directionToLight, b),
                         dot(directionToLight, n)) : 
                    directionToLight;
                
                //NV = dot(N, E);
			    NL = dot(N, L);
                
                // Hemispheric diffuse term
                diffuse = (NL + 1.0) * 0.5;
                
                // Edge term
                edgeScale = edgeBias(1.0 - dot(E, N), edgeWidth);
		        edgeScale = max(0.5, edgeScale * 2.0);
		        rim = edgeScale * 1.5;
                
                // Blinn-Phong specular term
                H = normalize(L + E);
			    NH = dot(N, H);
			    specular = max(pow(NH, shininess), 0.0);

	            col += ((Cd*diffuse) + (Cs*specular*3.0) + (Cr*Md*rim)) * attenuation;
	        }
	    }

        col *= 0.85;
	    gl_FragColor = (tex * col * shadow + emit); //mix(fogColor, (tex * col * shadow + emit), fog);
	    gl_FragColor.a = 1.0;
    }
};

/*
class UberShader: Shader
{
    static GLSLShader uberShader;
    Material material;
    bool parallaxEnabled = false;
    
    this(EventManager emgr, Material m)
    {
        if (!uberShader)
            uberShader = New!GLSLShader(emgr, _uberVertexShader, _uberFragmentShader);
        uberShader.setParamBool("shadeless", false);
        uberShader.setParamBool("textureEnabled", false);
        uberShader.setParamBool("bumpEnabled", false);
        uberShader.setParamBool("parallaxEnabled", false);
    }
    
    void bind(double dt)
    {
        if (material.textures[0])
            uberShader.setParamBool("textureEnabled", true);
        if (material.textures[1])
            uberShader.setParamBool("bumpEnabled", false);
        if (material.parallaxEnabled)
            uberShader.setParamBool("parallaxEnabled", true);
        if (material.shadeless)
            uberShader.setParamBool("shadeless", true);

        uberShader.bind(dt);
    }
    
    void unbind()
    {
        uberShader.unbind();
        
        uberShader.setParamBool("shadeless", false);
        uberShader.setParamBool("textureEnabled", false);
        uberShader.setParamBool("bumpEnabled", false);
        uberShader.setParamBool("parallaxEnabled", false);
    }
    
    bool supported()
    {
        return uberShader.supported;
    }
}
*/

GLSLShader uberShader(EventManager emgr)
{
    auto shader = New!GLSLShader(emgr, _uberVertexShader, _uberFragmentShader);
    shader.setParamBool("shadeless", false);
    shader.setParamBool("textureEnabled", false);
    shader.setParamBool("bumpEnabled", false);
    shader.setParamBool("parallaxEnabled", false);
    return shader;
}
