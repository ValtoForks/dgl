/*
Copyright (c) 2014 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module iqm;

import std.stdio;
import std.conv;
import std.math;

import derelict.sdl.sdl;
import derelict.opengl.gl;
import derelict.opengl.glext;
import derelict.opengl.glu;
import derelict.freetype.ft;

import dlib.core.stream;
import dlib.filesystem.filesystem;
import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.quaternion;
import dlib.math.affine;
import dlib.image.color;

import dgl.core.application;
import dgl.core.layer;
import dgl.core.drawable;
import dgl.vfs.vfs;
import dgl.vfs.file;
import dgl.ui.i18n;
import dgl.asset.serialization;
import dgl.templates.freeview;
import dgl.graphics.axes;
import dgl.graphics.lamp;

/*
 * Work-in-progress loader for IQM (InterQuake Format),
 * an open format for storing animated models
 * IQM is developed by Lee Salzman
 * http://sauerbraten.org/iqm
 *
 * Rationale
 * ---------
 * IQM is much like MD5, but far superior in terms of usability.
 * Unlike MD5, it explicitly stores vertex attributes like normals 
 * and tangents in the file, so no need to generate them.
 * Also it has better exporter support in Blender.
 * IQM is supported by a number of notable Open Source engines and games:
 * namely, DarkPlaces, Alien Arena, Xonotic, Warsow and others.
 *
 * Current status and limitations
 * ------------------------------
 * Loader is clearly not ready, there're no animation or shading.
 * All it currently does is loading vertices and skeleton,
 * calculating bind pose matrices and showing model in bind pose.
 */

enum IQM_VERSION = 2;

struct IQMHeader
{
    ubyte[16] magic;
    uint ver;
    uint filesize;
    uint flags;
    uint numText, ofsText;
    uint numMeshes, ofsMeshes;
    uint numVertexArrays, numVertices, ofsVertexArrays;
    uint numTriangles, ofsTriangles, ofsAdjacency;
    uint numJoints, ofsJoints;
    uint numPoses, ofsPoses;
    uint numAnims, ofsAnims;
    uint numFrames, numFrameChannels, ofsFrames, ofsBounds;
    uint numComment, ofsComment;
    uint numExtensions, ofsExtensions;
}

struct IQMVertexArray
{
    uint type;
    uint flags;
    uint format;
    uint size;
    uint offset;
}

struct IQMTriangle
{
    uint[3] vertex;
}

struct IQMJoint
{
    uint name;
    int parent;
    Vector3f translation;
    Quaternionf rotation;
    Vector3f scaling;
}

struct IQMMesh
{
    uint name;
    uint material;
    uint firstVertex, numVertices;
    uint firstTriangle, numTriangles;
}

alias ubyte[4] IQMBlendIndex;
alias ubyte[4] IQMBlendWeight;

enum
{
    IQM_POSITION     = 0,
    IQM_TEXCOORD     = 1,
    IQM_NORMAL       = 2,
    IQM_TANGENT      = 3,
    IQM_BLENDINDEXES = 4,
    IQM_BLENDWEIGHTS = 5,
    IQM_COLOR        = 6,
    IQM_CUSTOM       = 0x10
}

final class IQMModel: Drawable
{
    Vector3f[] vertices;
    Vector3f[] normals;
    IQMBlendIndex[] blendIndices;
    IQMBlendWeight[] blendWeights;

    Vector3f[] resVertices;

    IQMTriangle[] tris;
    IQMVertexArray[] vas;
    IQMMesh[] meshes;

    IQMJoint[] joints;

    Matrix4x4f[] baseFrame;
    Matrix4x4f[] invBaseFrame;

    void calcBindPose()
    {
        Matrix4x4f[] frame = new Matrix4x4f[joints.length];
        foreach(i, ref j; joints)
        {
            frame[i] = baseFrame[i] * invBaseFrame[i];
        }

        foreach(i, v; vertices)
        {
            auto bi = blendIndices[i];
            auto bw = blendWeights[i];

            float w = (cast(float)bw[0])/255.0f;
            Matrix4x4f mat = multScalarAffine(frame[bi[0]], w);

            for (uint j = 1; j < 4 && bw[j]; j++)
            {
                w = (cast(float)bw[j])/255.0f;
                auto tmp = multScalarAffine(frame[bi[j]], w);
                mat = addMatrixAffine(mat, tmp);
            }

            assert(validMatrix(mat));
            assert(mat.isAffine);

            resVertices[i] = vertices[i] * mat;
        }
    }

    private bool buffersReady = false;
    void generateBuffers()
    {
        glVertexPointer(3, GL_FLOAT, 0, resVertices.ptr);
        //glNormalPointer(GL_FLOAT, 0, normals.ptr);
        buffersReady = true;
    }

    override void draw(double dt)
    {
        if (!buffersReady)
            generateBuffers();

        glPushMatrix();
        glRotatef(-90, 1, 0, 0);
        glColor3f(1,1,1);
        glEnableClientState(GL_VERTEX_ARRAY);
        //glEnableClientState(GL_NORMAL_ARRAY);
        //glDrawElements(GL_TRIANGLES, 3 * tris.length, GL_UNSIGNED_INT, tris.ptr);
        foreach(ref m; meshes)
        {
            //glBindTexture(GL_TEXTURE_2D, textures[i]);
            glDrawElements(GL_TRIANGLES, 3 * m.numTriangles, GL_UNSIGNED_INT, &tris[m.firstTriangle]);
        }
        //glDisableClientState(GL_NORMAL_ARRAY);
        glDisableClientState(GL_VERTEX_ARRAY);
        glPopMatrix();
    }

    override void free()
    {
    }
}

IQMModel loadIQM(InputStream istrm, ReadOnlyFileSystem rofs)
{
    IQMModel model = new IQMModel();

    IQMHeader hdr = istrm.read!(IQMHeader, true);

    writefln("hdr.magic: %s", cast(string)hdr.magic);
    writefln("hdr.ver: %s", hdr.ver);
    assert(cast(string)hdr.magic == "INTERQUAKEMODEL\0");
    assert(hdr.ver == IQM_VERSION);

    writefln("hdr.numText: %s", hdr.numText);
    writefln("hdr.ofsText: %s", hdr.ofsText);
    istrm.setPosition(hdr.ofsText);
    ubyte[] buf = new ubyte[hdr.numText];
    istrm.fillArray(buf);
    writefln("text:\n%s", cast(string)buf);

    writefln("hdr.numVertexArrays: %s", hdr.numVertexArrays);
    writefln("hdr.ofsVertexArrays: %s", hdr.ofsVertexArrays);
    model.vas = new IQMVertexArray[hdr.numVertexArrays];
    istrm.setPosition(hdr.ofsVertexArrays);
    foreach(i; 0..hdr.numVertexArrays)
    {
        model.vas[i] = istrm.read!(IQMVertexArray, true);
    }

    foreach(i, va; model.vas)
    {
        writefln("Vertex array %s:", i);
        writefln("va.type: %s", va.type);
        writefln("va.flags: %s", va.flags);
        writefln("va.format: %s", va.format);
        writefln("va.size: %s", va.size);
        writefln("va.offset: %s", va.offset);
        writeln("---------------");

        if (va.type == IQM_POSITION)
        {
            assert(va.size == 3);
            // TODO: format asserion
            auto verts = new Vector3f[hdr.numVertices];
            istrm.setPosition(va.offset);
            istrm.fillArray(verts);
            model.vertices ~= verts;
        }
        else if (va.type == IQM_NORMAL)
        {
            assert(va.size == 3);
            // TODO: format asserion
            auto norms = new Vector3f[hdr.numVertices];
            istrm.setPosition(va.offset);
            istrm.fillArray(norms);
            model.normals ~= norms;
        }
        /* TODO: IQM_TEXCOORD, IQM_TANGENT */ 
        else if (va.type == IQM_BLENDINDEXES)
        {
            assert(va.size == 4);
            // TODO: format asserion
            auto bi = new IQMBlendIndex[hdr.numVertices];
            istrm.setPosition(va.offset);
            istrm.fillArray(bi);
            model.blendIndices ~= bi;
        }
        else if (va.type == IQM_BLENDWEIGHTS)
        {
            assert(va.size == 4);
            // TODO: format asserion
            auto bw = new IQMBlendWeight[hdr.numVertices];
            istrm.setPosition(va.offset);
            istrm.fillArray(bw);
            model.blendWeights ~= bw;
        }
    }

    writefln("hdr.numTriangles: %s", hdr.numTriangles);
    writefln("hdr.ofsTriangles: %s", hdr.ofsTriangles);

    model.tris = new IQMTriangle[hdr.numTriangles];
    istrm.setPosition(hdr.ofsTriangles);
    foreach(i; 0..hdr.numTriangles)
    {
        model.tris[i] = istrm.read!IQMTriangle;
    }

    //writefln("hdr.ofsAdjacency: %s", hdr.ofsAdjacency);

    writefln("hdr.numJoints: %s", hdr.numJoints);
    writefln("hdr.ofsJoints: %s", hdr.ofsJoints);
    model.baseFrame = new Matrix4x4f[hdr.numJoints];
    model.invBaseFrame = new Matrix4x4f[hdr.numJoints];
    istrm.setPosition(hdr.ofsJoints);
    foreach(i; 0..hdr.numJoints)
    {
        IQMJoint j = istrm.read!(IQMJoint, true);

        j.rotation.normalize();
        model.baseFrame[i] = transformationMatrix(j.rotation, j.translation, j.scaling);
        model.invBaseFrame[i] = model.baseFrame[i].inverse;

        if (j.parent >= 0)
        {
            model.baseFrame[i] = model.baseFrame[j.parent] * model.baseFrame[i];
            model.invBaseFrame[i] = model.invBaseFrame[i] * model.invBaseFrame[j.parent];
            //model.invBaseFrame[i] = model.baseFrame[i].inverse;
        }

        assert(validMatrix(model.baseFrame[i]));
        assert(validMatrix(model.invBaseFrame[i]));

        assert(model.baseFrame[i].isAffine);
        assert(model.invBaseFrame[i].isAffine);

        model.joints ~= j;
    }

    writefln("hdr.numMeshes: %s", hdr.numMeshes);
    writefln("hdr.ofsMeshes: %s", hdr.ofsMeshes);
    model.meshes = new IQMMesh[hdr.numMeshes];
    istrm.setPosition(hdr.ofsMeshes);
    foreach(i; 0..hdr.numMeshes)
    {
        model.meshes[i] = istrm.read!(IQMMesh, true);
    }

    model.resVertices = new Vector3f[model.vertices.length];

    model.calcBindPose();

    return model;
}

Matrix4x4f roundMatrix(Matrix4x4f m)
{
    Matrix4x4f res = m;
    foreach (ref v; res.arrayof)
        v = round(v);
    return res;
}

Matrix4x4f transformationMatrix(Quaternionf r, Vector3f t, Vector3f s)
{
    Matrix4x4f res = Matrix4x4f.identity;
    res *= translationMatrix(t);
    res *= r.toMatrix4x4;
    res *= scaleMatrix(s);
/*
    Matrix3x3f rm = r.toMatrix3x3;
    res.a11 = rm.a11 * s.x; res.a12 = rm.a12 * s.x; res.a13 = rm.a13 * s.x;
    res.a21 = rm.a21 * s.y; res.a22 = rm.a22 * s.y; res.a23 = rm.a23 * s.y;
    res.a31 = rm.a31 * s.z; res.a32 = rm.a32 * s.z; res.a33 = rm.a33 * s.z;
    res.a14 = t.x;
    res.a24 = t.y;
    res.a34 = t.z;
*/
    return res;
}

Matrix4x4f multScalarAffine(Matrix4x4f m, float s)
{
    Matrix4x4f res = m;
    res.a11 *= s; res.a12 *= s; res.a13 *= s;
    res.a21 *= s; res.a22 *= s; res.a23 *= s;
    res.a31 *= s; res.a32 *= s; res.a33 *= s;
    res.a14 *= s;
    res.a24 *= s;
    res.a34 *= s;
    return res;
}

Matrix4x4f addMatrixAffine(Matrix4x4f m1, Matrix4x4f m2)
{
    Matrix4x4f res = m1;
    res.a11 += m2.a11; res.a12 += m2.a12; res.a13 += m2.a13;
    res.a21 += m2.a21; res.a22 += m2.a22; res.a23 += m2.a23;
    res.a31 += m2.a31; res.a32 += m2.a32; res.a33 += m2.a33;
    res.a14 += m2.a14;
    res.a24 += m2.a24;
    res.a34 += m2.a34;
    return res;
}

bool validMatrix(T, size_t N)(Matrix!(T, N) m)
{
    foreach (v; m.arrayof)
        if (isnan(v))
            return false;
    return true;
}

class IQMTestApp: Application
{
    alias eventManager this;

    FreeviewLayer layer3d;

    VirtualFileSystem vfs;

    this()
    {
        super(640, 480, "IQM Demo");

        clearColor = Color4f(0.5f, 0.5f, 0.5f);

        layer3d = new FreeviewLayer(videoWidth, videoHeight, 1);
        layer3d.alignToWindow = true;
        layer3d.drawAxes = false;
        addLayer(layer3d);
        eventManager.setGlobal("camera", layer3d.camera);

        layer3d.addDrawable(new Axes());

        Lamp lamp = new Lamp(Vector4f(0.0f, 20.0f, 0.0f, 1.0f));
        layer3d.addDrawable(lamp);

        vfs = new VirtualFileSystem();
        vfs.mount("./");

        // Load a reference model from IQM SDK
        auto model = loadIQM(vfs.openForInput("mrfixit.iqm"), vfs);

        layer3d.addDrawable(model);

        int n;
        glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &n);
        writefln("GL_MAX_VERTEX_ATTRIBS = %s", n);
    }

    override void onQuit()
    {
        super.onQuit();
    }
    
    override void onKeyDown()
    {
        super.onKeyDown();
    }
    
    override void onMouseButtonDown()
    {
        super.onMouseButtonDown();
    }
    
    override void onUpdate()
    {
        super.onUpdate();
    }
}

void loadLibraries()
{
    version(Windows)
    {
        enum sharedLibSDL = "SDL.dll";
        enum sharedLibFT = "freetype.dll";
    }
    version(linux)
    {
        enum sharedLibSDL = "./libsdl.so";
        enum sharedLibFT = "./libfreetype.so";
    }

    DerelictGL.load();
    DerelictGLU.load();
    DerelictSDL.load(sharedLibSDL);
    DerelictFT.load(sharedLibFT);
}

void main()
{
    loadLibraries();
    Locale.readLang("locale");
    auto app = new IQMTestApp();
    app.run();
}

