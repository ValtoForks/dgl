DGL Scene Format (*.dgl)

The file consists of separate data chunks.

Chunk layout:

  ushort type - chunk type code
  int id - data block identifier (>=0, -1 for null data)
  ushort nameSize - size of "name" field in bytes
  uint dataSize - size of "data" field in bytes
  ubyte[nameSize] name - optional name (UTF-8)
  ubyte[dataSize] data - optional data block

There're several predefined chunk types:

HEADER (type = 0)
Header name is usually treaten as scene name.
Header data is usually empty, but may contain engine-specific metadata.

END (type = 1)
Just a placeholder to mark end of the file.

TRIMESH (type = 2)
Triangle mesh.
"data" field is a sequence of Triangle structs:
   int materialId - material id (-1 - no material)
   float[3][3] - vertices
   float[3][3] - normals
   float[2][3] - uv1 coordinates
   float[2][3] - uv2 coordinates
Total number of triangles = dataSize / Triangle.sizeof.

MATERIAL (type = 3)
Material.
"data" fiels:
   uint jsonSize - size of "json" field
   ubyte[jsonSize] json - properties in JSON format (UTF-8)

ENTITY (type = 4)
Generic 3D object.
"data" field:
   uint type - engine-specific type code
   int materialId - material id (-1 - no material)
   int meshId - mesh id (-1 - no mesh)
   float[3] position - position vector (XYZ)
   float[4] rotation - rotation quaternion (XYZW)
   float[3] scaling - position vector (XYZ)
   uint jsonSize - size of "json" field
   ubyte[jsonSize] json - properties in JSON format (UTF-8)

